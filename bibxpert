#!/usr/bin/env python
#
# Copyright 2015 Rafael Ferreira da Silva
# http://www.rafaelsilva.com/tools
#
# Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing,
#  software distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
__author__ = "Rafael Ferreira da Silva"

from optparse import OptionParser, OptionGroup

from operations.deduplicate import *
from operations.search import *
from tools import loader

log = logging.getLogger(__name__)

SEARCH_OPTIONS = ['arxiv', 'doi', 'ieee', 'elsevier']


def process(options, args):
    # Load entries
    entries = loader.Loader(args).load_from_file()

    # Deduplicate
    if options.all or options.deduplicate:
        entries = deduplicate(entries)

    # Scholar Resources
    if options.all or options.scholar:
        entries = doi.process(entries)
        entries = ieee.process(entries)
        entries = science_direct.process(entries)
        entries = arxiv.process(entries)
    else:
        for option in options.search:
            if option == "doi":
                entries = doi.process(entries)
            elif option == "ieee":
                entries = ieee.process(entries)
            elif option == "elsevier":
                entries = science_direct.process(entries)
            elif option == "arxiv":
                entries = arxiv.process(entries)

    # Write results
    if options.output:
        f = open(options.output, 'w')
        log.info("Writing entries to '%s'." % options.output)

    for e in entries:
        if options.output:
            f.write(str(e))
        else:
            print e

    if options.output:
        f.close()


def option_parser(usage):
    """

    :param usage: tool usage string
    :return: parsed options and arguments
    """
    parser = OptionParser(usage="usage: %s" % usage)

    parser.add_option("-a", "--all", dest="all", action="store_true",
                      default=False, help="Apply all options")
    parser.add_option("-D", "--deduplicate", dest="deduplicate", action="store_true",
                      default=False, help="Remove duplicated entries")
    parser.add_option("-s", "--scholar", dest="scholar", action="store_true",
                      default=False, help="Update BIBTex entries according to Scholar Resources "
                                          "(e.g., DOI, IEEE, Science Direct, and arXiv)")
    parser.add_option("-S", "--search", dest="search", action="append",
                      help="Update BIBTex entries according to a list of Scholar Resources "
                           "(e.g., doi, ieee, elsevier, or arxiv)")

    parser.add_option("-o", "--output", action="store", type="string",
                      dest="output", default=None, help="Output file")

    global logging_group
    logging_group = OptionGroup(parser, "Logging Options")
    logging_group.add_option("-d", "--debug", dest="debug", action="store_true",
                             default=False, help="Turn on debugging")
    logging_group.add_option("-v", "--verbose", dest="verbose", action="store_true",
                             default=False, help="Show progress messages")
    parser.add_option_group(logging_group)

    fn = parser.parse_args

    def parse(*args, **kwargs):
        options, args = fn(*args, **kwargs)

        if options.debug:
            configure_logging(level=logging.DEBUG)
        elif options.verbose:
            configure_logging(level=logging.INFO)
        else:
            configure_logging(logging.WARNING)
        return options, args

    parser.parse_args = parse

    return parser


def _print_valid_search_options():
    options = ""
    for option in SEARCH_OPTIONS:
        if len(options) > 0:
            options += ", "
        options += option
    print "List of valid search options: %s" % options


def main():
    args = sys.argv[1:]
    parser = option_parser("bibxpert.py [OPTIONS] <LIST_OF_BIBFILES>")
    options, args = parser.parse_args(args)

    if len(args) == 0:
        log.error("At least one bibtex file should be provided.")
        parser.print_help()
        exit(1)

    # validate search options
    if not options.all and not options.scholar:
        for option in options.search:
            if option not in SEARCH_OPTIONS:
                log.error("Search options not valid: %s" % option)
                _print_valid_search_options()
                exit(1)

    process(options, args)


if __name__ == '__main__':
    main()